Teste de escalabilidade. Tinha o intuito de verificar o uso de memoria usando roteamento (artefatos linkados).
Foram testados dois cenarios baseados no codigo Jason do final deste texto. Em um deles foram criados artefatos
tipo A e no outro tipo B (linkados).

Cenario A
 - ArtefatoA camel artifact
 - ArtefatoB artefato normal cartago
 - ArtefatoC camel artifact (roteador)
 - 10 x Artefatos do tipo A (camel artifact) cada um instanciando camel e criando suas rotas

Cenario B
 - ArtefatoA camel artifact
 - ArtefatoB artefato normal cartago
 - ArtefatoC camel artifact (roteador)
 - 10 x Artefatos do tipo B linkados com C

Foram tomadas 3 medidas de memoria heap e stack. Para obter estes valores foi utilizado o script 
https://github.com/amarjeetanandsingh/jps_stat que por sua vez utiliza o aplicativo jstat com opcao gc.
A aplicacao JaCaMo rodou por 2 minutos em cada tomada de uso de memoria, este tempo foi o suficiente para
o MAS entrar em "regime".

Dados (Heap+Stack em MB):
		Tomada1	Tomada2	Tomada3
CenarioA	81+50	73+47	82+50
CenarioB	49+40	56+39	48+41


/* Initial goals */
!start.
!listen("ArtifactA").

//!listen("Artifact0").
//!listen("Artifact1").
//!listen("Artifact2").
//!listen("Artifact3").
//!listen("Artifact4").
//!listen("Artifact5").
//!listen("Artifact6").
//!listen("Artifact7").
//!listen("Artifact8").
//!listen("Artifact9").

!listen("ArtifactC").

+!start: true <-
	.print("Building artifacts..."); 
	makeArtifact("ArtifactB","artifacts.ArtifactB",[],ArtifactBid);
	makeArtifact("ArtifactC","camelartifacts.ArtifactC",[],ArtifactCid);
	.print("Linking artifacts..."); 
	linkArtifacts(ArtifactCid,"out-1",ArtifactBid);
	linkArtifacts(ArtifactBid,"out-2",ArtifactCid);

	makeArtifact("Artifact0","artifacts.ArtifactB",[],Artifactid0);
	makeArtifact("Artifact1","artifacts.ArtifactB",[],Artifactid1);
	makeArtifact("Artifact2","artifacts.ArtifactB",[],Artifactid2);
	makeArtifact("Artifact3","artifacts.ArtifactB",[],Artifactid3);
	makeArtifact("Artifact4","artifacts.ArtifactB",[],Artifactid4);
	makeArtifact("Artifact5","artifacts.ArtifactB",[],Artifactid5);
	makeArtifact("Artifact6","artifacts.ArtifactB",[],Artifactid6);
	makeArtifact("Artifact7","artifacts.ArtifactB",[],Artifactid7);
	makeArtifact("Artifact8","artifacts.ArtifactB",[],Artifactid8);
	makeArtifact("Artifact9","artifacts.ArtifactB",[],Artifactid9);
	linkArtifacts(ArtifactCid,"out-1",Artifactid0);
	linkArtifacts(Artifactid0,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid1);
	linkArtifacts(Artifactid1,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid2);
	linkArtifacts(Artifactid2,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid3);
	linkArtifacts(Artifactid3,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid4);
	linkArtifacts(Artifactid4,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid5);
	linkArtifacts(Artifactid5,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid6);
	linkArtifacts(Artifactid6,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid7);
	linkArtifacts(Artifactid7,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid8);
	linkArtifacts(Artifactid8,"out-2",ArtifactCid);
	linkArtifacts(ArtifactCid,"out-1",Artifactid9);
	linkArtifacts(Artifactid9,"out-2",ArtifactCid);

	makeArtifact("ArtifactA","camelartifacts.ArtifactA",[],ArtifactAid);
	//makeArtifact("Artifact0","camelartifacts.ArtifactA",[],Artifactid0);
	//makeArtifact("Artifact1","camelartifacts.ArtifactA",[],Artifactid1);
	//makeArtifact("Artifact2","camelartifacts.ArtifactA",[],Artifactid2);
	//makeArtifact("Artifact3","camelartifacts.ArtifactA",[],Artifactid3);
	//makeArtifact("Artifact4","camelartifacts.ArtifactA",[],Artifactid4);
	//makeArtifact("Artifact5","camelartifacts.ArtifactA",[],Artifactid5);
	//makeArtifact("Artifact6","camelartifacts.ArtifactA",[],Artifactid6);
	//makeArtifact("Artifact7","camelartifacts.ArtifactA",[],Artifactid7);
	//makeArtifact("Artifact8","camelartifacts.ArtifactA",[],Artifactid8);
	//makeArtifact("Artifact9","camelartifacts.ArtifactA",[],Artifactid9);

	.print("Artifact are ready for use!");
	!!sendKAmsg("ArtifactA");

	!!sendKAmsg("Artifact0");
	!!sendKAmsg("Artifact1");
	!!sendKAmsg("Artifact2");
	!!sendKAmsg("Artifact3");
	!!sendKAmsg("Artifact4");
	!!sendKAmsg("Artifact5");
	!!sendKAmsg("Artifact6");
	!!sendKAmsg("Artifact7");
	!!sendKAmsg("Artifact8");
	!!sendKAmsg("Artifact9");

	!!sendKAmsg("ArtifactB");
	!!sendKAmsg("ArtifactC").
	
+!listen(Art): true <-
	focusWhenAvailable(Art); //Just to make sure the artifact was already created
	.print("Start listening on ",Art,"..."); 
	lookupArtifact(Art,Aid);
	focus(Aid);
	listenRoutes(true)[artifact_id(Aid)]; //Start listening on artifact (blocking command)
	.print("Listening process on ",Art," finished!").

+!sendKAmsg(Art): true <- 
	focusWhenAvailable(Art); //Just to make sure the artifact was already created
	lookupArtifact(Art,Aid);
	.print("Sending keepalive message to ",Art,"!");
	focus(Aid);
	sendKA[artifact_id(Aid)];
	.wait(2000);
	!!sendKAmsg(Art).

{ include("$jacamoJar/templates/common-cartago.asl") }
{ include("$jacamoJar/templates/common-moise.asl") }
